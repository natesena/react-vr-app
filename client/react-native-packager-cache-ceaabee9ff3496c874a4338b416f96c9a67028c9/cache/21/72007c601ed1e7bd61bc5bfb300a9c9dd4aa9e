Object.defineProperty(exports,"__esModule",{value:true});
















var _BaseView=require("./BaseView");var _BaseView2=babelHelpers.interopRequireDefault(_BaseView);
var _merge=require("../Utils/merge");var _merge2=babelHelpers.interopRequireDefault(_merge);
var _ovrui=require("ovrui");var OVRUI=babelHelpers.interopRequireWildcard(_ovrui);
var _three=require("three");var THREE=babelHelpers.interopRequireWildcard(_three);/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *//**
 * RCTAmbientLight: runtime implementation of the <AmbientLight >
 * https://threejs.org/docs/index.html#api/lights/AmbientLight
 * @class RCTAmbientLight
 * @extends RCTBaseView
 * 
 */var RCTAmbientLight=function(_RCTBaseView){babelHelpers.inherits(RCTAmbientLight,_RCTBaseView);/**
   * constructor: allocates the required resources and sets defaults
   */function RCTAmbientLight(guiSys){babelHelpers.classCallCheck(this,RCTAmbientLight);// create the ambient light as a child of an empty UIView
// this allows embedding in layouts
var _this=babelHelpers.possibleConstructorReturn(this,(RCTAmbientLight.__proto__||Object.getPrototypeOf(RCTAmbientLight)).call(this));var light=new THREE.AmbientLight();_this.view=new OVRUI.UIView(guiSys);_this.view.add(light);// In "physically correct" mode, the product of color * intensity is
// interpreted as luminous intensity measured in candelas.
Object.defineProperty(_this.props,'intensity',
{
set:function set(value){
light.intensity=value;
}});


// Color of the light.
Object.defineProperty(
_this.style,
'color',
{
set:function set(value){
light.color.set(value);
}});



// defaults that match three.js
_this.props.intensity=1;return _this;
}

/**
   * Describes the properties representable by this view type and merges
   * with super type
   */babelHelpers.createClass(RCTAmbientLight,null,[{key:"describe",value:function describe()
{
return(0,_merge2.default)(babelHelpers.get(RCTAmbientLight.__proto__||Object.getPrototypeOf(RCTAmbientLight),"describe",this).call(this),{
// declare the native props sent from react to runtime
NativeProps:{
intensity:'number'}});


}}]);return RCTAmbientLight;}(_BaseView2.default);exports.default=RCTAmbientLight;