Object.defineProperty(exports,"__esModule",{value:true});























var _VRVideoPlayer=require("../Video/VRVideoPlayer");
var _VRVideoComponent=require("../Video/VRVideoComponent");var _VRVideoComponent2=babelHelpers.interopRequireDefault(_VRVideoComponent);
var _Module2=require("./Module");var _Module3=babelHelpers.interopRequireDefault(_Module2);
var _MediaEvent=require("../Events/MediaEvent");var _MediaEvent2=babelHelpers.interopRequireDefault(_MediaEvent);/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *//**
 * Implements basic video playback.
 * Example usage:
 * ```
 * videoModule.addHandle(handle);
 * videoModule.setUrl(handle, url);
 * videoModule._setOnVideoReadyCallback(handle, function() {
 *   videoModule.play(handle);
 * });
 * videoModule.load(handle);
 * ```
 * @class RCTVideoModule
 * @extends Module
 */var MEDIA_EVENT_CALLBACK_NAME={canplay:'onVideoCanPlay',durationchange:'onVideoDurationChange',ended:'onVideoEnded',error:'onVideoError',timeupdate:'onVideoTimeUpdate',playing:'onVideoPlaying',pause:'onVideoPause'};var RCTVideoModule=function(_Module){babelHelpers.inherits(RCTVideoModule,_Module);function RCTVideoModule(rnctx){babelHelpers.classCallCheck(this,RCTVideoModule);var _this=babelHelpers.possibleConstructorReturn(this,(RCTVideoModule.__proto__||Object.getPrototypeOf(RCTVideoModule)).call(this,
'RCTVideoModule'));
_this.supportedFormats=(0,_VRVideoPlayer.getCustomizedSupportedFormats)()||[];
_this._videoDefs={};
_this._players={};
_this._rnctx=rnctx;
_this._mediaEventCallbacks={};return _this;
}

/**
   * Add a new handle to the video module
   * @param {string} handle - The video handle.
   */babelHelpers.createClass(RCTVideoModule,[{key:"addHandle",value:function addHandle(
handle){
var player=new _VRVideoComponent2.default();
this._players[handle]=player;
this._videoDefs[handle]=this._createVideoDef();
this._mediaEventCallbacks[handle]={};
player.onMediaEvent=this._onMediaEvent.bind(this,handle);
}},{key:"_createVideoDef",value:function _createVideoDef()

{
return{};
}},{key:"_onMediaEvent",value:function _onMediaEvent(

handle,event){
var eventType=event.type;
if(MEDIA_EVENT_CALLBACK_NAME[eventType]){
var callbackName=MEDIA_EVENT_CALLBACK_NAME[eventType];
var mediaEvent=new _MediaEvent2.default(event);
// Emit media event to react
this._rnctx.callFunction('RCTDeviceEventEmitter','emit',[callbackName,handle,mediaEvent]);

// Emit media event to native side
var listeners=this._mediaEventCallbacks[handle]?
this._mediaEventCallbacks[handle][eventType]:
null;
if(listeners){
listeners.forEach(function(listener){return listener(handle,mediaEvent);});
}
}
}

// Add listener to media events on native side
},{key:"_addMediaEventListener",value:function _addMediaEventListener(handle,eventType,listener){
if(!this._mediaEventCallbacks[handle]){
console.warn(
'RCTVideoModule.addMediaEventListener: '+("can't add listener on a not exist handle: "+
handle));

return;
}

if(!MEDIA_EVENT_CALLBACK_NAME[eventType]){
console.warn(
'RCTVideoModule.addMediaEventListener: '+("can't add listener on a not supported eventType: "+
eventType));

return;
}

if(!this._mediaEventCallbacks[handle][eventType]){
this._mediaEventCallbacks[handle][eventType]=[];
}

var listeners=this._mediaEventCallbacks[handle][eventType];
if(listeners.indexOf(listener)===-1){
listeners.push(listener);
}
}

// Remove listener to media events on native side
},{key:"_removeMediaEventListener",value:function _removeMediaEventListener(handle,eventType,listener){
if(!this._mediaEventCallbacks[handle]||!this._mediaEventCallbacks[handle][eventType]){
return;
}
var listeners=this._mediaEventCallbacks[handle][eventType];
if(listeners){
var index=listeners.indexOf(listener);
if(index!==-1){
listeners.splice(index,1);
}
}
}

/**
   * Set the video url
   * @param {string} handle - The video handle.
   */},{key:"setUrl",value:function setUrl(
handle,url){
this._videoDefs[handle].src=url;
}

/**
   * Set the video format
   * @param {string} handle - The video handle.
   * @param {string} format - The video format.
   */},{key:"setFormat",value:function setFormat(
handle,format){
this._videoDefs[handle].format=format;
}

/**
   * Set video metaData to video player, this can be used for
   * customized video player
   * @param {string} handle - The video handle.
   * @param {any} metaData - The video metaData.
   */},{key:"setMetaData",value:function setMetaData(
handle,metaData){
this._videoDefs[handle].metaData=metaData;
}},{key:"getVideoTexture",value:function getVideoTexture(

handle){
if(!handle){
// Video was removed.
return null;
}
var player=this._players[handle];
return player.videoTextures[0];
}

/**
   * load the video
   * @param {string} handle - The video handle.
   */},{key:"load",value:function load(
handle){
this._players[handle].setVideo(this._videoDefs[handle]);

// Add resource to mono texture
var monoTextureInfo={
type:'MonoTextureInfo',
texture:this._players[handle].videoTextures[0]};

this._rnctx.RCTResourceManager.addResource('MonoTexture',handle,monoTextureInfo);
}

/**
   * play the video
   * @param {string} handle - The video handle.
   */},{key:"play",value:function play(
handle){
this._players[handle].videoPlayer.play();
}

/**
   * pause the video
   * @param {string} handle - The video handle.
   */},{key:"pause",value:function pause(
handle){
this._players[handle].videoPlayer.pause();
}

/**
   * seek to a position in a video
   * @param {string} handle - The video handle.
   * @param {number} position - The video position to seek to
   */},{key:"seekTo",value:function seekTo(
handle,position){
this._players[handle].videoPlayer.seekTo(position);
}

/**
   * Set the muted attributed of the video
   * @param {string} handle - The video handle.
   * @param {boolean} muted - Whether the video's audio should be muted.
   */},{key:"setMuted",value:function setMuted(
handle,muted){
this._players[handle].videoPlayer.setMuted(muted);
}

/**
   * Set the volume of the video
   * @param {string} handle - The video handle.
   * @param {number} volume - The video volume.
   */},{key:"setVolume",value:function setVolume(
handle,volume){
this._players[handle].videoPlayer.setVolume(volume);
}

/**
   * unload the video and dispose of any resources.
   * @param {string} handle - The video handle.
   */},{key:"unload",value:function unload(
handle){
this._rnctx.RCTResourceManager.removeResource('MonoTexture',handle);
this._players[handle].dispose();
delete this._players[handle];
delete this._videoDefs[handle];
delete this._mediaEventCallbacks[handle];
}},{key:"frame",value:function frame()

{
for(var key in this._players){
this._players[key].frame();
}
}}]);return RCTVideoModule;}(_Module3.default);exports.default=RCTVideoModule;