Object.defineProperty(exports,"__esModule",{value:true});

















/**
 * RefCountCache is a basic cache that stores entries as long as there is an
 * external reference to them. When no objects remain referencing the cached
 * value, the entry is ejected.
 *//**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */var RefCountCache=function(){function RefCountCache(cleanup){babelHelpers.classCallCheck(this,RefCountCache);this._cleanup=cleanup;this._stateCache={};}babelHelpers.createClass(RefCountCache,[{key:"has",value:function has(
path){
return!!this._stateCache[path];
}},{key:"get",value:function get(

path){
var entry=this._stateCache[path];
if(!entry){
throw new Error("RefCountCache entry for "+path+" not found");
}
return entry.state;
}},{key:"addEntry",value:function addEntry(

path,state){
var prev=this._stateCache[path];
if(prev){
return;
}
this._stateCache[path]={
refs:1,
state:state};

}},{key:"addReference",value:function addReference(

path){
var prev=this._stateCache[path];
if(!prev){
return 0;
}
prev.refs++;
return prev.refs;
}},{key:"removeReference",value:function removeReference(

path){
var prev=this._stateCache[path];
if(!prev){
return 0;
}
prev.refs--;
if(prev.refs<=0){
if(this._cleanup){
this._cleanup(path,prev.state);
}
delete this._stateCache[path];
}
return Math.max(0,prev.refs);
}}]);return RefCountCache;}();exports.default=RefCountCache;