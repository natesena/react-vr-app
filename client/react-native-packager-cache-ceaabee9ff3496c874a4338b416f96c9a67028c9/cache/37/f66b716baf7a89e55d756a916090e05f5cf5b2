/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule MediaPlayerState
 */

var EventEmitter=require('EventEmitter');

/**
 * MediaPlayerState creates an instance that controls video states internally,
 * which can be shared between media components and control components.
 * The simplest workflow is to create a `MediaPlayerState`, and hook it with components:
 * ```
 * class VideoPlayer extends React.Component {
 * constructor(props) {
 *   super(props);
 *   this.state = {
 *    playerState: new MediaPlayerState({autoPlay: true, muted: true}), // init with muted, autoPlay
 *   };
 * }
 * render() {
 *   return (
 *     <View>
 *      <Video
 *        style={{height: 2.25, width: 4}}
 *        source={{uri: 'assets/1.webm'}}
 *        playerState={this.state.playerState} />
 *      <VideoControl
 *        style={{height: 0.2, width: 4}}
 *        playerState={this.state.playerState} />
 *     </View>
 *   );
 * }
 * }
 * ```
 * To control video playback, you can directly call functions on `playerState`
 * ```
 * this.state.playerState.play();
 * this.state.playerState.pause();
 * this.state.playerState.setMuted(false);
 * ```
 */var
MediaPlayerState=function(_EventEmitter){babelHelpers.inherits(MediaPlayerState,_EventEmitter);
/**
   * Create a new MediaPlayerState.
   *
   * @param options (optional) - Configure the initial state.
   *
   * - autoPlay {boolean}: whether the media should start playing automatically. Default is false.
   * - muted {boolean}: whether the media should be muted. Default is false.
   * - volume {number}: Volume of the media, generally in the range 0 to 1. Default is 1.0
   */
function MediaPlayerState(options){babelHelpers.classCallCheck(this,MediaPlayerState);var _this=babelHelpers.possibleConstructorReturn(this,(MediaPlayerState.__proto__||Object.getPrototypeOf(MediaPlayerState)).call(this));

_this.playStatus='closed';
_this.duration=undefined;
_this.currentTime=undefined;
_this.volume=options.volume!==undefined?options.volume:1.0;
_this.muted=options.muted||false;
_this.autoPlay=options.autoPlay||false;

_this.onDurationChange=_this.onDurationChange.bind(_this);
_this.onTimeUpdate=_this.onTimeUpdate.bind(_this);
_this.onPlayStatusChange=_this.onPlayStatusChange.bind(_this);return _this;
}

/**
   * Begin or resume playback.
   */babelHelpers.createClass(MediaPlayerState,[{key:"play",value:function play()
{
// call play
this.emit('play');
}

/**
   * Pause playback.
   */},{key:"pause",value:function pause()
{
// call pause
this.emit('pause');
}

/**
   * Seek to a position of the video
   * @param timeSec - the position seek to.
   */},{key:"seekTo",value:function seekTo(
timeSec){
// call seekTo
this.emit('seekTo',timeSec);
}

/**
   * Register for calling a command on a Video on a user gesture on a Component
   * @param commandID - the command id.
   * @param commandArgs - the command arguments.
   * @param reactTag - the tag of the component that listen to the user gesture.
   */},{key:"registerUserGesture",value:function registerUserGesture(
commandID,commandArgs,reactTag){
// call registerUserGesture
this.emit('registerUserGesture',commandID,commandArgs,reactTag);
}

/**
   * Unregister for calling a command on a Video on a user gesture on a Component
   * @param reactTag - the tag of the component that listen to the user gesture.
   */},{key:"unregisterUserGesture",value:function unregisterUserGesture(
reactTag){
// call unregisterUserGesture
this.emit('unregisterUserGesture',reactTag);
}

/**
   * Set the volume of the media (0.0 ~ 1.0). Default is 1.0
   */},{key:"setVolume",value:function setVolume(
value){
this.volume=value;
this.emit('volumeChange',value);
}

/**
   * Whether the audio should be muted. Default is false.
   */},{key:"setMuted",value:function setMuted(
value){
this.muted=value;
this.emit('mutedChange',value);
}},{key:"onDurationChange",value:function onDurationChange(

event){
if(event.nativeEvent.duration){
this.duration=event.nativeEvent.duration;
this.emit('durationChange',this.duration);
}
}},{key:"onTimeUpdate",value:function onTimeUpdate(

event){
if(event.nativeEvent.currentTime){
this.currentTime=event.nativeEvent.currentTime;
this.emit('timeUpdate',this.currentTime);
}
}},{key:"onPlayStatusChange",value:function onPlayStatusChange(

event){
this.playStatus=event.nativeEvent.playStatus;
this.emit('playStatusChange',this.playStatus);
if(this.playStatus==='ready'&&this.autoPlay){
this.play();
}
}}]);return MediaPlayerState;}(EventEmitter);


module.exports=MediaPlayerState;