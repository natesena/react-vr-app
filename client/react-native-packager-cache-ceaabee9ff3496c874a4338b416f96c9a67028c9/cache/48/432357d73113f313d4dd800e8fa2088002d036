/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule JSTimers
 * @format
 * 
 */
'use strict';

var Platform=require('Platform');
var Systrace=require('Systrace');

var invariant=require('fbjs/lib/invariant');var _require=
require('NativeModules'),Timing=_require.Timing;



var _performanceNow=null;
function performanceNow(){
if(!_performanceNow){
_performanceNow=require('fbjs/lib/performanceNow');
}
return _performanceNow();
}

/**
 * JS implementation of timer functions. Must be completely driven by an
 * external clock signal, all that's stored here is timerID, timer type, and
 * callback.
 */








// These timing contants should be kept in sync with the ones in native ios and
// android `RCTTiming` module.
var FRAME_DURATION=16.666666666666668;
var IDLE_CALLBACK_FRAME_DEADLINE=1;

var MAX_TIMER_DURATION_MS=60000;
var IS_ANDROID=false;
var ANDROID_LONG_TIMER_MESSAGE="Setting a timer for a long period of time, i.e. multiple minutes, is a performance and correctness issue on Android as it keeps the timer module awake, and timers can only be called when the app is in the foreground. See https://github.com/facebook/react-native/issues/12981 for more info.";





// Parallel arrays
var callbacks=[];
var types=[];
var timerIDs=[];
var immediates=[];
var requestIdleCallbacks=[];
var requestIdleCallbackTimeouts={};
var identifiers=[];

var GUID=1;
var errors=null;

var hasEmittedTimeDriftWarning=false;

// Returns a free index if one is available, and the next consecutive index otherwise.
function _getFreeIndex(){
var freeIndex=timerIDs.indexOf(null);
if(freeIndex===-1){
freeIndex=timerIDs.length;
}
return freeIndex;
}

function _allocateCallback(func,type){
var id=GUID++;
var freeIndex=_getFreeIndex();
timerIDs[freeIndex]=id;
callbacks[freeIndex]=func;
types[freeIndex]=type;









return id;
}

/**
 * Calls the callback associated with the ID. Also unregister that callback
 * if it was a one time timer (setTimeout), and not unregister it if it was
 * recurring (setInterval).
 */
function _callTimer(timerID,frameTime,didTimeout){
require('fbjs/lib/warning')(
timerID<=GUID,
'Tried to call timer with ID %s but no such timer exists.',
timerID);


// timerIndex of -1 means that no timer with that ID exists. There are
// two situations when this happens, when a garbage timer ID was given
// and when a previously existing timer was deleted before this callback
// fired. In both cases we want to ignore the timer id, but in the former
// case we warn as well.
var timerIndex=timerIDs.indexOf(timerID);
if(timerIndex===-1){
return;
}

var type=types[timerIndex];
var callback=callbacks[timerIndex];
if(!callback||!type){
console.error('No callback found for timerID '+timerID);
return;
}






// Clear the metadata
if(
type==='setTimeout'||
type==='setImmediate'||
type==='requestAnimationFrame'||
type==='requestIdleCallback')
{
_clearIndex(timerIndex);
}

try{
if(
type==='setTimeout'||
type==='setInterval'||
type==='setImmediate')
{
callback();
}else if(type==='requestAnimationFrame'){
callback(performanceNow());
}else if(type==='requestIdleCallback'){
callback({
timeRemaining:function timeRemaining(){
// TODO: Optimisation: allow running for longer than one frame if
// there are no pending JS calls on the bridge from native. This
// would require a way to check the bridge queue synchronously.
return Math.max(0,FRAME_DURATION-(performanceNow()-frameTime));
},
didTimeout:!!didTimeout});

}else{
console.error('Tried to call a callback with invalid type: '+type);
}
}catch(e){
// Don't rethrow so that we can run all timers.
if(!errors){
errors=[e];
}else{
errors.push(e);
}
}




}

/**
 * Performs a single pass over the enqueued immediates. Returns whether
 * more immediates are queued up (can be used as a condition a while loop).
 */
function _callImmediatesPass(){




// The main reason to extract a single pass is so that we can track
// in the system trace
if(immediates.length>0){
var passImmediates=immediates.slice();
immediates=[];

// Use for loop rather than forEach as per @vjeux's advice
// https://github.com/facebook/react-native/commit/c8fd9f7588ad02d2293cac7224715f4af7b0f352#commitcomment-14570051
for(var i=0;i<passImmediates.length;++i){
_callTimer(passImmediates[i],0);
}
}




return immediates.length>0;
}

function _clearIndex(i){
timerIDs[i]=null;
callbacks[i]=null;
types[i]=null;
identifiers[i]=null;
}

function _freeCallback(timerID){
// timerIDs contains nulls after timers have been removed;
// ignore nulls upfront so indexOf doesn't find them
if(timerID==null){
return;
}

var index=timerIDs.indexOf(timerID);
// See corresponding comment in `callTimers` for reasoning behind this
if(index!==-1){
_clearIndex(index);
var type=types[index];
if(type!=='setImmediate'&&type!=='requestIdleCallback'){
Timing.deleteTimer(timerID);
}
}
}

/**
 * JS implementation of timer functions. Must be completely driven by an
 * external clock signal, all that's stored here is timerID, timer type, and
 * callback.
 */
var JSTimers={
/**
   * @param {function} func Callback to be invoked after `duration` ms.
   * @param {number} duration Number of milliseconds.
   */
setTimeout:function setTimeout(
func,
duration)

{for(var _len=arguments.length,args=Array(_len>2?_len-2:0),_key=2;_key<_len;_key++){args[_key-2]=arguments[_key];}









var id=_allocateCallback(
function(){return func.apply(undefined,args);},
'setTimeout');

Timing.createTimer(id,duration||0,Date.now(),/* recurring */false);
return id;
},

/**
   * @param {function} func Callback to be invoked every `duration` ms.
   * @param {number} duration Number of milliseconds.
   */
setInterval:function setInterval(
func,
duration)

{for(var _len2=arguments.length,args=Array(_len2>2?_len2-2:0),_key2=2;_key2<_len2;_key2++){args[_key2-2]=arguments[_key2];}









var id=_allocateCallback(
function(){return func.apply(undefined,args);},
'setInterval');

Timing.createTimer(id,duration||0,Date.now(),/* recurring */true);
return id;
},

/**
   * @param {function} func Callback to be invoked before the end of the
   * current JavaScript execution loop.
   */
setImmediate:function setImmediate(func){for(var _len3=arguments.length,args=Array(_len3>1?_len3-1:0),_key3=1;_key3<_len3;_key3++){args[_key3-1]=arguments[_key3];}
var id=_allocateCallback(
function(){return func.apply(undefined,args);},
'setImmediate');

immediates.push(id);
return id;
},

/**
   * @param {function} func Callback to be invoked every frame.
   */
requestAnimationFrame:function requestAnimationFrame(func){
var id=_allocateCallback(func,'requestAnimationFrame');
Timing.createTimer(id,1,Date.now(),/* recurring */false);
return id;
},

/**
   * @param {function} func Callback to be invoked every frame and provided
   * with time remaining in frame.
   * @param {?object} options
   */
requestIdleCallback:function requestIdleCallback(func,options){
if(requestIdleCallbacks.length===0){
Timing.setSendIdleEvents(true);
}

var timeout=options&&options.timeout;
var id=_allocateCallback(
timeout!=null?
function(deadline){
var timeoutId=requestIdleCallbackTimeouts[id];
if(timeoutId){
JSTimers.clearTimeout(timeoutId);
requestIdleCallbackTimeouts[id];
}
return func(deadline);
}:
func,
'requestIdleCallback');

requestIdleCallbacks.push(id);

if(timeout!=null){
var timeoutId=JSTimers.setTimeout(function(){
var index=requestIdleCallbacks.indexOf(id);
if(index>-1){
requestIdleCallbacks.splice(index,1);
_callTimer(id,performanceNow(),true);
}
delete requestIdleCallbackTimeouts[id];
if(requestIdleCallbacks.length===0){
Timing.setSendIdleEvents(false);
}
},timeout);
requestIdleCallbackTimeouts[id]=timeoutId;
}
return id;
},

cancelIdleCallback:function cancelIdleCallback(timerID){
_freeCallback(timerID);
var index=requestIdleCallbacks.indexOf(timerID);
if(index!==-1){
requestIdleCallbacks.splice(index,1);
}

var timeoutId=requestIdleCallbackTimeouts[timerID];
if(timeoutId){
JSTimers.clearTimeout(timeoutId);
delete requestIdleCallbackTimeouts[timerID];
}

if(requestIdleCallbacks.length===0){
Timing.setSendIdleEvents(false);
}
},

clearTimeout:function clearTimeout(timerID){
_freeCallback(timerID);
},

clearInterval:function clearInterval(timerID){
_freeCallback(timerID);
},

clearImmediate:function clearImmediate(timerID){
_freeCallback(timerID);
var index=immediates.indexOf(timerID);
if(index!==-1){
immediates.splice(index,1);
}
},

cancelAnimationFrame:function cancelAnimationFrame(timerID){
_freeCallback(timerID);
},

/**
   * This is called from the native side. We are passed an array of timerIDs,
   * and
   */
callTimers:function callTimers(timersToCall){
invariant(
timersToCall.length!==0,
'Cannot call `callTimers` with an empty list of IDs.');


// $FlowFixMe: optionals do not allow assignment from null
errors=null;
for(var i=0;i<timersToCall.length;i++){
_callTimer(timersToCall[i],0);
}

if(errors){
var errorCount=errors.length;
if(errorCount>1){
// Throw all the other errors in a setTimeout, which will throw each
// error one at a time
for(var ii=1;ii<errorCount;ii++){
JSTimers.setTimeout(
function(error){
throw error;
}.bind(null,errors[ii]),
0);

}
}
throw errors[0];
}
},

callIdleCallbacks:function callIdleCallbacks(frameTime){
if(
FRAME_DURATION-(performanceNow()-frameTime)<
IDLE_CALLBACK_FRAME_DEADLINE)
{
return;
}

// $FlowFixMe: optionals do not allow assignment from null
errors=null;
if(requestIdleCallbacks.length>0){
var passIdleCallbacks=requestIdleCallbacks.slice();
requestIdleCallbacks=[];

for(var i=0;i<passIdleCallbacks.length;++i){
_callTimer(passIdleCallbacks[i],frameTime);
}
}

if(requestIdleCallbacks.length===0){
Timing.setSendIdleEvents(false);
}

if(errors){
errors.forEach(function(error){return(
JSTimers.setTimeout(function(){
throw error;
},0));});

}
},

/**
   * This is called after we execute any command we receive from native but
   * before we hand control back to native.
   */
callImmediates:function callImmediates(){
errors=null;
while(_callImmediatesPass()){}
if(errors){
errors.forEach(function(error){return(
JSTimers.setTimeout(function(){
throw error;
},0));});

}
},

/**
   * Called from native (in development) when environment times are out-of-sync.
   */
emitTimeDriftWarning:function emitTimeDriftWarning(warningMessage){
if(hasEmittedTimeDriftWarning){
return;
}
hasEmittedTimeDriftWarning=true;
console.warn(warningMessage);
}};


if(!Timing){
console.warn("Timing native module is not available, can't set timers.");
// $FlowFixMe: we can assume timers are generally available
module.exports={
callImmediates:JSTimers.callImmediates,
setImmediate:JSTimers.setImmediate};

}else{
module.exports=JSTimers;
}