/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule MessageQueue
 * 
 * @format
 */

/*eslint no-bitwise: 0*/

'use strict';

var ErrorUtils=require('ErrorUtils');
var Systrace=require('Systrace');

var deepFreezeAndThrowOnMutationInDev=require('deepFreezeAndThrowOnMutationInDev');
var invariant=require('fbjs/lib/invariant');
var stringifySafe=require('stringifySafe');












var TO_JS=0;
var TO_NATIVE=1;

var MODULE_IDS=0;
var METHOD_IDS=1;
var PARAMS=2;
var MIN_TIME_BETWEEN_FLUSHES_MS=5;

var TRACE_TAG_REACT_APPS=131072;

var DEBUG_INFO_LIMIT=64;

// Work around an initialization order issue
var JSTimers=null;var

MessageQueue=function(){















function MessageQueue(){var _this=this;babelHelpers.classCallCheck(this,MessageQueue);this.


































callFunctionReturnFlushedQueue=function(
module,
method,
args)
{
_this.__guard(function(){
_this.__callFunction(module,method,args);
});

return _this.flushedQueue();
};this.

callFunctionReturnResultAndFlushedQueue=function(
module,
method,
args)
{
var result=void 0;
_this.__guard(function(){
result=_this.__callFunction(module,method,args);
});

return[result,_this.flushedQueue()];
};this.

invokeCallbackAndReturnFlushedQueue=function(cbID,args){
_this.__guard(function(){
_this.__invokeCallback(cbID,args);
});

return _this.flushedQueue();
};this.

flushedQueue=function(){
_this.__guard(function(){
_this.__callImmediates();
});

var queue=_this._queue;
_this._queue=[[],[],[],_this._callID];
return queue[0].length?queue:null;
};this._lazyCallableModules={};this._queue=[[],[],[],0];this._successCallbacks=[];this._failureCallbacks=[];this._callID=0;this._lastFlush=0;this._eventLoopStartTime=new Date().getTime();}/**
   * Public APIs
   */babelHelpers.createClass(MessageQueue,[{key:"getEventLoopRunningTime",value:function getEventLoopRunningTime(){
return new Date().getTime()-this._eventLoopStartTime;
}},{key:"registerCallableModule",value:function registerCallableModule(

name,module){
this._lazyCallableModules[name]=function(){return module;};
}},{key:"registerLazyCallableModule",value:function registerLazyCallableModule(

name,factory){
var module=void 0;
var getValue=factory;
this._lazyCallableModules[name]=function(){
if(getValue){
module=getValue();
getValue=null;
}
return module;
};
}},{key:"getCallableModule",value:function getCallableModule(

name){
var getValue=this._lazyCallableModules[name];
return getValue?getValue():null;
}},{key:"enqueueNativeCall",value:function enqueueNativeCall(


moduleID,
methodID,
params,
onFail,
onSucc)
{
if(onFail||onSucc){






// Encode callIDs into pairs of callback identifiers by shifting left and using the rightmost bit
// to indicate fail (0) or success (1)
onFail&&params.push(this._callID<<1);
onSucc&&params.push(this._callID<<1|1);
this._successCallbacks[this._callID]=onSucc;
this._failureCallbacks[this._callID]=onFail;
}









this._callID++;

this._queue[MODULE_IDS].push(moduleID);
this._queue[METHOD_IDS].push(methodID);








this._queue[PARAMS].push(params);

var now=new Date().getTime();
if(
global.nativeFlushQueueImmediate&&(
now-this._lastFlush>=MIN_TIME_BETWEEN_FLUSHES_MS||
this._inCall===0))
{
var queue=this._queue;
this._queue=[[],[],[],this._callID];
this._lastFlush=now;
global.nativeFlushQueueImmediate(queue);
}
Systrace.counterEvent('pending_js_to_native_queue',this._queue[0].length);

if(this.__spy){
this.__spyNativeCall(moduleID,methodID,params,{
failCbId:onFail?params[params.length-2]:-1,
successCbId:onSucc?params[params.length-1]:-1});

}
}},{key:"callSyncHook",value:function callSyncHook(

moduleID,methodID,args){









var returnValue=global.nativeCallSyncHook(moduleID,methodID,args);
if(this.__spy){
this.__spyNativeCall(moduleID,methodID,args,{
isSync:true,
returnValue:returnValue});

}
return returnValue;
}},{key:"createDebugLookup",value:function createDebugLookup(

moduleID,name,methods){




}

/**
   * Private methods
   */},{key:"__guard",value:function __guard(

fn){
this._inCall++;
try{
fn();
}catch(error){
ErrorUtils.reportFatalError(error);
}finally{
this._inCall--;
}
}},{key:"__callImmediates",value:function __callImmediates()

{
Systrace.beginEvent('JSTimers.callImmediates()');
if(!JSTimers){
JSTimers=require('JSTimers');
}
JSTimers.callImmediates();
Systrace.endEvent();
}},{key:"__callFunction",value:function __callFunction(

module,method,args){
this._lastFlush=new Date().getTime();
this._eventLoopStartTime=this._lastFlush;
Systrace.beginEvent(module+"."+method+"()");
if(this.__spy){
this.__spyJSCall(module,method,args);
}
var moduleMethods=this.getCallableModule(module);
invariant(
!!moduleMethods,
'Module %s is not a registered callable module (calling %s)',
module,
method);

invariant(
!!moduleMethods[method],
'Method %s does not exist on module %s',
method,
module);

var result=moduleMethods[method].apply(moduleMethods,args);
Systrace.endEvent();
return result;
}},{key:"__invokeCallback",value:function __invokeCallback(

cbID,args){
this._lastFlush=new Date().getTime();
this._eventLoopStartTime=this._lastFlush;

// The rightmost bit of cbID indicates fail (0) or success (1), the other bits are the callID shifted left.
var callID=cbID>>>1;
var isSuccess=cbID&1;
var callback=isSuccess?
this._successCallbacks[callID]:
this._failureCallbacks[callID];




























if(!callback){
return;
}

this._successCallbacks[callID]=this._failureCallbacks[callID]=null;
callback.apply(null,args);




}},{key:"__spyJSCall",value:function __spyJSCall(


module,
method,
methodArgs,
params)
{
if(!this.__spy){
return;
}
this.__spy(babelHelpers.extends({
type:TO_JS,
isSync:false,
module:module,
method:method,
failCbId:-1,
successCbId:-1,
args:methodArgs},
params));

}},{key:"__spyNativeCall",value:function __spyNativeCall(


moduleID,
methodID,
methodArgs,
params)
{
var spy=this.__spy;
if(!spy){
return;
}

var moduleName=moduleID+'';
var methodName=methodID;





spy(babelHelpers.extends({
type:TO_NATIVE,
isSync:false,
module:moduleName,
method:methodName,
failCbId:-1,
successCbId:-1,
args:methodArgs},
params));

}}],[{key:"spy",value:function spy(spyOrToggle){if(spyOrToggle===true){MessageQueue.prototype.__spy=function(info){console.log((info.type===TO_JS?'N->JS':'JS->N')+" : "+(""+(info.module?info.module+'.':'')+info.method)+("("+JSON.stringify(info.args)+")"));};}else if(spyOrToggle===false){MessageQueue.prototype.__spy=null;}else{MessageQueue.prototype.__spy=spyOrToggle;}}}]);return MessageQueue;}();


module.exports=MessageQueue;