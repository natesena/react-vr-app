/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AmbientLight
 */
'use strict';

var NativeMethodsMixin=require('NativeMethodsMixin');
var PropTypes=require('prop-types');
var React=require('React');
var ReactNativeViewAttributes=require('ReactNativeViewAttributes');
var View=require('View');
var StyleSheetPropType=require('StyleSheetPropType');
var LayoutAndTransformColorPropTypes=require('LayoutAndTransformColorPropTypes');

var createReactClass=require('create-react-class');
var requireNativeComponent=require('requireNativeComponent');

/**
 * A light that affects all objects in the scene equally and from all directions.
 *
 * The [Wikipedia](https://en.wikipedia.org/wiki/Shading#Ambient_lighting) definition is as follows:
 * An ambient light source represents an omni-directional, fixed-intensity and
 * fixed-color light source that affects all objects in the scene equally. Upon rendering,
 * all objects in the scene are brightened with the specified intensity and color.
 * This type of light source is mainly used to provide the scene with a basic view of the
 * different objects in it. This is the simplest type of lighting to implement and models
 * how light can be scattered or reflected many times producing a uniform effect.
 *
 * Representation of
 *
 * https://threejs.org/docs/index.html#api/lights/AmbientLight
 */
var AmbientLight=createReactClass({displayName:"AmbientLight",
mixins:[NativeMethodsMixin],

propTypes:babelHelpers.extends({},
View.propTypes,{
style:StyleSheetPropType(LayoutAndTransformColorPropTypes),

/**
     * Intensity of the light
     */
intensity:PropTypes.number}),


viewConfig:{
uiViewClassName:'AmbientLight',
validAttributes:babelHelpers.extends({},
ReactNativeViewAttributes.RCTView,{
intensity:true})},



getDefaultProps:function getDefaultProps(){
return{};
},

render:function render(){
var props=babelHelpers.extends({},this.props)||{};
props.style=props.style||{};
if(!props.style.position){
props.style.position='absolute';
}
return(
React.createElement(RKAmbientLight,babelHelpers.extends({},
props,{
testID:this.props.testID,
onStartShouldSetResponder:function onStartShouldSetResponder(){return true;},
onResponderTerminationRequest:function onResponderTerminationRequest(){return false;}}),
this.props.children));


}});


var RKAmbientLight=requireNativeComponent('AmbientLight',AmbientLight,{
nativeOnly:{}});


module.exports=AmbientLight;