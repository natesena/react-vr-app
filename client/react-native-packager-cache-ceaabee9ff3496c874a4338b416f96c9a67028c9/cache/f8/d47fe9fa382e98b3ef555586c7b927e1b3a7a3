Object.defineProperty(exports,"__esModule",{value:true});








var _three=require("three");var THREE=babelHelpers.interopRequireWildcard(_three);

/**
 * Class managing Head Model for ReactVR.
 * @constructor
 * @param {ReactNativeContext} rnctx - React Native Context
 */var
RCTHeadModel=function(){
function RCTHeadModel(rnctx){babelHelpers.classCallCheck(this,RCTHeadModel);
this._rnctx=rnctx;
}babelHelpers.createClass(RCTHeadModel,[{key:"sendHeadModel",value:function sendHeadModel(

camera){
// Send head(center eye) pose information
// TODO: send left/right eye pose information
camera.updateMatrixWorld(true);
// This is the transform from camera to world
var headMatrix=camera.matrixWorld;
// This is the transform from world to camera
var viewMatrix=new THREE.Matrix4();
viewMatrix.getInverse(headMatrix);

var headMatrixArray=headMatrix.toArray();
var viewMatrixArray=viewMatrix.toArray();

var target=this._rnctx.lastHit?this._rnctx.getHitTag(this._rnctx.lastHit):null;
var source=this._rnctx.lastSource;
if(target){
// Dispatch head pose to hit view
this._rnctx.callFunction('RCTEventEmitter','receiveEvent',[
target,
'topHeadPose',
{
headMatrix:headMatrixArray,
viewMatrix:viewMatrixArray,
target:target,
source:source}]);


}

// Dispatch event to registered callbacks
this._rnctx.callFunction('RCTDeviceEventEmitter','emit',[
'onReceivedHeadMatrix',
headMatrixArray,
viewMatrixArray,
camera.fov,
camera.aspect]);

}},{key:"frame",value:function frame(

camera){
this.sendHeadModel(camera);
}}]);return RCTHeadModel;}();/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */exports.default=RCTHeadModel;