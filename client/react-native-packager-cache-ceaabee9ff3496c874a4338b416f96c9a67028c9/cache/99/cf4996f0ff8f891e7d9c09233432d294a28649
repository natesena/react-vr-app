/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DirectionalLight
 */
'use strict';

var NativeMethodsMixin=require('NativeMethodsMixin');
var PropTypes=require('prop-types');
var React=require('React');
var ReactNativeViewAttributes=require('ReactNativeViewAttributes');
var View=require('View');
var StyleSheetPropType=require('StyleSheetPropType');
var LayoutAndTransformColorPropTypes=require('LayoutAndTransformColorPropTypes');

var createReactClass=require('create-react-class');
var requireNativeComponent=require('requireNativeComponent');

/**
 * A light which is an infinite distance away and orientated along a particular direction.
 *
 * [Wikipedia](https://en.wikipedia.org/wiki/Shading#Directional_lighting) defines directional
 * lighting as a light source which illuminates all objects equally from a given direction,
 * like an area light of infinite size and infinite distance from the scene; there is shading,
 * but cannot be any distance falloff.
 *
 * Representation of
 *
 * https://threejs.org/docs/index.html#api/lights/DirectionalLight
 */
var DirectionalLight=createReactClass({displayName:"DirectionalLight",
mixins:[NativeMethodsMixin],

propTypes:babelHelpers.extends({},
View.propTypes,{
style:StyleSheetPropType(LayoutAndTransformColorPropTypes),

/**
     * Intensity of the light
     */
intensity:PropTypes.number}),


viewConfig:{
uiViewClassName:'DirectionalLight',
validAttributes:babelHelpers.extends({},
ReactNativeViewAttributes.RCTView,{
intensity:true})},



getDefaultProps:function getDefaultProps(){
return{};
},

render:function render(){
var props=babelHelpers.extends({},this.props)||{};
props.style=props.style||{};
if(!props.style.position){
props.style.position='absolute';
}
return(
React.createElement(RKDirectionalLight,babelHelpers.extends({},
props,{
testID:this.props.testID,
onStartShouldSetResponder:function onStartShouldSetResponder(){return true;},
onResponderTerminationRequest:function onResponderTerminationRequest(){return false;}}),
this.props.children));


}});


var RKDirectionalLight=requireNativeComponent('DirectionalLight',DirectionalLight,{
nativeOnly:{}});


module.exports=DirectionalLight;