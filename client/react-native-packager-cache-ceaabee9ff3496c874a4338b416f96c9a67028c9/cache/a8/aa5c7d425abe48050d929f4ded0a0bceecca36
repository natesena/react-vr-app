Object.defineProperty(exports,"__esModule",{value:true});














var _BaseView=require("./BaseView");var _BaseView2=babelHelpers.interopRequireDefault(_BaseView);
var _merge=require("../Utils/merge");var _merge2=babelHelpers.interopRequireDefault(_merge);/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *//**
 * RCTRawText: runtime implementation of the RawText that is generated by <Text>[text]</Text>
 * @class RCTRawText
 * @extends RCTBaseView
 */var RCTRawText=function(_RCTBaseView){babelHelpers.inherits(RCTRawText,_RCTBaseView);/**
   * constructor: allocates the required resources and sets defaults
   */function RCTRawText(guiSys){babelHelpers.classCallCheck(this,RCTRawText);var _this=babelHelpers.possibleConstructorReturn(this,(RCTRawText.__proto__||Object.getPrototypeOf(RCTRawText)).call(this));_this.isRawText=true;Object.defineProperty(_this.props,'text',{set:function set(value){_this._text=value||'';_this._textDirty=true;
_this.markTextDirty();
},
get:function get(){
return _this._text;
}});return _this;

}

// mark all parent textnodes dirty
// must descend right to root as <Text> can be nested
babelHelpers.createClass(RCTRawText,[{key:"markTextDirty",value:function markTextDirty(){
var cur=this.getParent();
while(cur){
cur.isDirty=true;
cur.markTextDirty&&cur.markTextDirty();
cur=cur.getParent();
}
}

/**
   * Describes the properties representable by this view type and merges
   * with super type
   */}],[{key:"describe",value:function describe()
{
return(0,_merge2.default)(babelHelpers.get(RCTRawText.__proto__||Object.getPrototypeOf(RCTRawText),"describe",this).call(this),{
// declare the supported properties send from react to native
NativeProps:{
text:'string'}});


}}]);return RCTRawText;}(_BaseView2.default);exports.default=RCTRawText;