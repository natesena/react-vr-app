Object.defineProperty(exports,"__esModule",{value:true});














var _BaseView=require("./BaseView");var _BaseView2=babelHelpers.interopRequireDefault(_BaseView);
var _merge=require("../Utils/merge");var _merge2=babelHelpers.interopRequireDefault(_merge);
var _three=require("three");var THREE=babelHelpers.interopRequireWildcard(_three);
var _ovrui=require("ovrui");var OVRUI=babelHelpers.interopRequireWildcard(_ovrui);/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *//**
 * RCTPrefetch: Description here
 * @class RCTPrefetch
 * @extends RCTBaseView
 */var RCTPrefetch=function(_RCTBaseView){babelHelpers.inherits(RCTPrefetch,_RCTBaseView);/**
   * constructor: allocates the required resources and sets defaults
   */function RCTPrefetch(guiSys,rnctx){babelHelpers.classCallCheck(this,RCTPrefetch);var _this=babelHelpers.possibleConstructorReturn(this,(RCTPrefetch.__proto__||Object.getPrototypeOf(RCTPrefetch)).call(this));_this.view=new OVRUI.UIView(guiSys);Object.defineProperty(_this.props,'source',{set:function set(value){if(Array.isArray(value)){
_this.prefetch(value);
}else{
_this.prefetch(value.uri);
}
}});return _this;

}

/**
   * prefetch
   * Request a load and then add to cache
   */babelHelpers.createClass(RCTPrefetch,[{key:"prefetch",value:function prefetch(
uri){
if(uri==null){
return;
}

if(Array.isArray(uri)){
// Cubemap, check proper format
if(uri.length!==6||!uri[0].uri){
console.warn(
'Prefetch expected cubemap source in format [{uri: http..}, {uri: http..}, ... ]');

return;
}
// Transform the input array into an array of url strings for threejs to load.
var urls=uri.map(function(x){
return x.uri;
});

var loader=new THREE.CubeTextureLoader();
loader.setCrossOrigin('Access-Control-Allow-Origin');
loader.load(urls,function(texture){return RCTPrefetch.addToCache(urls,texture);},function(){},function(){});
}else{
// Panorama
var _loader=new THREE.TextureLoader();
_loader.setCrossOrigin('Access-Control-Allow-Origin');
_loader.load(uri,function(texture){return RCTPrefetch.addToCache(uri,texture);},function(){},function(){});
}
}

/**
   * addToCache
   * Add a texture in the cache
   */},{key:"dispose",































/**
   * Dispose of any associated resources
   */value:function dispose()
{
babelHelpers.get(RCTPrefetch.prototype.__proto__||Object.getPrototypeOf(RCTPrefetch.prototype),"dispose",this).call(this);
RCTPrefetch.removeFromCache(this.props.source);
}

/**
   * Describes the properties representable by this view type and merges
   * with super type
   */}],[{key:"addToCache",value:function addToCache(uri,texture){if(!RCTPrefetch.cache){RCTPrefetch.cache={};}RCTPrefetch.cache[uri]=texture;}/**
   * isCached
   */},{key:"isCached",value:function isCached(uri){return RCTPrefetch.cache&&RCTPrefetch.cache.hasOwnProperty(uri);}/**
   * getFromCache
   */},{key:"getFromCache",value:function getFromCache(uri){return RCTPrefetch.cache&&RCTPrefetch.cache[uri];}/**
   * removeFromCache
   */},{key:"removeFromCache",value:function removeFromCache(uri){if(RCTPrefetch.cache){delete RCTPrefetch.cache[uri];}}},{key:"describe",value:function describe(){return(0,_merge2.default)(babelHelpers.get(RCTPrefetch.__proto__||Object.getPrototypeOf(RCTPrefetch),"describe",this).call(this),{// declare the native props sent from react to runtime
NativeProps:{source:'string'}});
}}]);return RCTPrefetch;}(_BaseView2.default);exports.default=RCTPrefetch;